% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/condition.R
\name{condition}
\alias{condition}
\alias{conditions}
\alias{cnd}
\alias{conditions<-}
\alias{conditions<-.function}
\title{Conditions}
\usage{
condition(
  class,
  message = NULL,
  type = c("error", "warning", "message"),
  package = get_package(),
  exports = NULL,
  help = NULL,
  register = !is.null(package)
)

conditions(..., class = NULL, type = NULL, package = NULL, fun = NULL)

cnd(condition)

conditions(x, ...) <- value

\method{conditions}{`function`}(x, append = FALSE, ...) <- value
}
\arguments{
\item{class}{The name of the new class}

\item{message}{The message to be displayed when the condition is called}

\item{type}{The type of condition: error, warning, or message}

\item{package}{The package to which the condition belongs}

\item{exports}{The exported functions to be displayed when the condition is
called}

\item{help}{The help message to be displayed for the condition function}

\item{register}{Controls registration checks}

\item{...}{Additional arguments passed to methods}

\item{fun}{if a function is passed, then retrieves the \code{"conditions"}
attribute}

\item{condition}{A condition object}

\item{x}{An object}

\item{value}{A \code{condition}}

\item{append}{If \code{TRUE}, adds to the list of \code{conditions}}
}
\value{
\itemize{
\item \code{\link[=condition]{condition()}} a \code{cnd::condition_function} object
\item \code{\link[=conditions]{conditions()}} a \code{list} of all conditions
}

\itemize{
\item \code{\link[=cnd]{cnd()}} is a wrapper for calling \code{\link[=stop]{stop()}}, \code{\link[=warning]{warning()}}, or \code{\link[=message]{message()}}
}
}
\description{
\code{\link[=condition]{condition()}} is used to create a new condition function that
itself returns a new \code{condition}.

\code{\link[=conditions]{conditions()}} retrieves all conditions based on search values.  The
parameters serve as filtering arguments.
}
\details{
Conditions
}
\examples{
# create a new condition:
cond_bad_value <- condition("bad_value")

# use the condition
try(stop(cond_bad_value()))
try(cnd(cond_bad_value()))

# dynamic messages:
cond_class_error <- condition(
  "class_error",
  message = \(x) paste("class cannot be", toString(class(x)))
)
try(stop(cond_class_error(list())))
}
